cmake_minimum_required(VERSION 3.5)
project(interface_demo)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(device_msgs REQUIRED)
find_package(device_srvs REQUIRED)

add_executable(test_message_pub src/test_message_pub.cpp)
ament_target_dependencies(test_message_pub rclcpp std_msgs device_msgs)

add_executable(test_message_sub src/test_message_sub.cpp)
ament_target_dependencies(test_message_sub rclcpp std_msgs device_msgs)

add_executable(test_srv_server src/test_srv_server.cpp)
ament_target_dependencies(test_srv_server rclcpp std_msgs device_srvs)

add_executable(test_srv_client src/test_srv_client.cpp)
ament_target_dependencies(test_srv_client rclcpp std_msgs device_srvs)

install(TARGETS
  test_message_pub
  test_message_sub
  test_srv_server
  test_srv_client
  DESTINATION lib/${PROJECT_NAME})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
